<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringClound之OpenFeign</title>
      <link href="/2023/02/09/springcloundopenfeign/"/>
      <url>/2023/02/09/springcloundopenfeign/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringCloud之OpenFeign"><a href="#SpringCloud之OpenFeign" class="headerlink" title="SpringCloud之OpenFeign"></a>SpringCloud之OpenFeign</h2><h3 id="Open-feign-使用步骤"><a href="#Open-feign-使用步骤" class="headerlink" title="Open-feign 使用步骤"></a>Open-feign 使用步骤</h3><p>1.开启扫描Feign接口注解</p><p><code>@EnableFeignClients</code></p><p>2.编写Feign接口</p><p><code>@FeignClient(value = &quot;mno-general-open-api&quot;,path = &quot;/v2/packages&quot;)</code></p><p><img src="/2023/02/09/springcloundopenfeign/image-20230209161043299.png" alt="image-20230209161043299"></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>服务名称：mno-general-open-api</p><p>feign 调用404 报错，打印日志如下：</p><p><code>Caused by: feign.FeignException$NotFound: [404] during [GET] to [http://mno-general-open-api/v2/packages/list?keyCode=VIN12345123450105&amp;keyType=VIN]</code></p><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p><code>http://mno-general-open-api/v2/packages/list?keyCode=VIN12345123450105&amp;keyType=VIN</code>，</p><p>起初以为是服务名称没有替换成实例地址，于是通过看源码发现url实际已经做了替换，上面的日志是替换之前打印的，并不是调用的最终地址，所以不是这里的问题，源码如下：</p><p><code>lbClient(clientName).executeWithLoadBalancer(ribbonRequest, requestConfig).toResponse();</code></p><p>真正的原因是Feign + Ribbon由其他服务设置时，不支持自定义<code>server.servlet.context-path</code>（上下文路径）。这是一个<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/401">官方旧错误</a>，尚未修复</p><p><img src="/2023/02/09/springcloundopenfeign/image-20230209171851170.png" alt="image-20230209171851170"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>去掉此项配置</p><p><code>server.servlet.context-path=/mno-general-open-api</code></p><p>或在@FeignClient注解中添加content-path</p><p><code>@FeignClient(value = &quot;mno-general-open-api&quot;,path = &quot;/mno-general-open-api/v2/packages&quot;)</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝</title>
      <link href="/2022/05/18/ling-kao-bei/"/>
      <url>/2022/05/18/ling-kao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h2><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>现代操作系统使用虚拟内存，即虚拟地址取代物理地址，使用虚拟内存可以有2个好处：</p><ul><li>虚拟内存空间可以远远大于物理内存空间</li><li>多个虚拟内存可以指向同一个物理地址</li></ul><h3 id="DMA（Direct-Memory-Access）"><a href="#DMA（Direct-Memory-Access）" class="headerlink" title="DMA（Direct Memory Access）"></a>DMA（Direct Memory Access）</h3><p>DMA本质是主板上独立的芯片，允许外设设备直接和内存进行IO数据传输，过程不需要CPU参与</p><h3 id="内核空间和用户空间"><a href="#内核空间和用户空间" class="headerlink" title="内核空间和用户空间"></a>内核空间和用户空间</h3><p>操作系统为每个进分配含用户空间和内核空间。</p><ul><li>内核空间主要提供进程调度、内存分配，连接硬件资源等功能</li><li>用户空间主要是提供个应用进程的空间，无权访问内核空间的资源，如果要访问需要通过系统调用（C函数）来完成</li></ul><h3 id="内核态和用户态"><a href="#内核态和用户态" class="headerlink" title="内核态和用户态"></a>内核态和用户态</h3><ul><li>进程运行在内核空间，被称为进程的内核态</li><li>进程运行在用户空间，被称为进程的用户态</li></ul><h2 id="传统IO流程"><a href="#传统IO流程" class="headerlink" title="传统IO流程"></a>传统IO流程</h2><p>A从磁盘上发送一个文件给B，这个发送的动作应包含一次读和写操作</p><p>读：</p><ul><li>应用进程调用read方法，向操作系统发起IO调用，<strong>上下文从用户态切换到内核态（切换1）</strong></li><li>DMA控制器把数据从磁盘中读取到内核缓存区中，<strong>DMA拷贝（拷贝1）</strong></li><li>CPU把内核缓冲区中的数据拷贝到用户缓冲区，<strong>CPU拷贝（拷贝2）</strong>，read方法返回，<strong>上下文从内核态切换到用户态（切换2）</strong></li></ul><p>写：</p><ul><li>应用进程调用write方法，向操作系统发起IO调用，<strong>上下文从用户态切换到内核态（切换3）</strong></li><li>CPU把用户缓存区中的数据，拷贝到Socket缓存区，<strong>CPU拷贝（拷贝3）</strong></li><li>DMA控制器把Socket缓存区中的数据拷贝到网卡设备上，<strong>DMA拷贝（拷贝4）</strong>，write方法返回，<strong>上下文从内核态切换到用户态（切换4）</strong></li></ul><p>传统IO需要<strong>4次数据拷贝</strong>（2次DMA拷贝，2次CPU拷贝），<strong>4次进程上下文切换</strong></p><h2 id="mmap实现零拷贝："><a href="#mmap实现零拷贝：" class="headerlink" title="mmap实现零拷贝："></a>mmap实现零拷贝：</h2><p>运行虚拟内存的技术，将用户缓存区映射到读缓存区（同一个物理地址）上，使得用户空间和内核空间共享，从而减少数据从内核空间到用户空间的一次数据拷贝，且用户进程内存是虚拟的，知识映射到读缓存区了，还可以节省一半的内存空间。</p><ol><li>用户进程通过<code>mmap方法</code>向操作系统内核发起IO调用，<strong>上下文从用户态切换为内核态</strong>。</li><li>CPU利用DMA控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li><strong>上下文从内核态切换回用户态</strong>，mmap方法返回。</li><li>用户进程通过<code>write</code>方法向操作系统内核发起IO调用，<strong>上下文从用户态切换为内核态</strong>。</li><li>CPU将内核缓冲区的数据拷贝到的socket缓冲区。</li><li>CPU利用DMA控制器，把数据从socket缓冲区拷贝到网卡，<strong>上下文从内核态切换回用户态</strong>，write调用返回。</li></ol><p>可以发现，<code>mmap+write</code>实现的零拷贝，I&#x2F;O发生了<strong>4</strong>次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中，包括了<strong>2次DMA拷贝和1次CPU拷贝</strong>。</p><p>mmap需要<strong>3次数据拷贝</strong>（2次DMA拷贝，1次CPU拷贝），<strong>4次进程上下文切换</strong></p><h2 id="sendfile实现的零拷贝"><a href="#sendfile实现的零拷贝" class="headerlink" title="sendfile实现的零拷贝"></a>sendfile实现的零拷贝</h2><p><code>sendfile</code>是Linux2.1内核版本后引入的一个系统调用函数，API如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);</span><br></pre></td></tr></table></figure><ol><li>out_fd:为待写入内容的文件描述符，一个socket描述符。，</li><li>in_fd:为待读出内容的文件描述符，必须是真实的文件，不能是socket和管道。</li><li>offset：指定从读入文件的哪个位置开始读，如果为NULL，表示文件的默认起始位置。</li><li>count：指定在fdout和fdin之间传输的字节数。</li></ol><p>sendfile表示在两个文件描述符之间传输数据，它是在<strong>操作系统内核</strong>中操作的，<strong>避免了数据从内核缓冲区和用户缓冲区之间的拷贝操作</strong>，因此可以使用它来实现零拷贝。</p><p>sendfile实现的零拷贝流程如下：</p><ol><li>用户进程发起sendfile系统调用，<strong>上下文（切换1）从用户态转向内核态</strong></li><li>DMA控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>CPU将读缓冲区中数据拷贝到socket缓冲区</li><li>DMA控制器，异步把数据从socket缓冲区拷贝到网卡，</li><li><strong>上下文（切换2）从内核态切换回用户态</strong>，sendfile调用返回。</li></ol><p>可以发现，<code>sendfile</code>实现的零拷贝，I&#x2F;O发生了<strong>2</strong>次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中，包括了<strong>2次DMA拷贝和1次CPU拷贝</strong>。那能不能把CPU拷贝的次数减少到0次呢？有的，即<code>带有DMA收集拷贝功能的sendfile</code>！</p><h2 id="sendfile-DMA-scatter-x2F-gather实现的零拷贝"><a href="#sendfile-DMA-scatter-x2F-gather实现的零拷贝" class="headerlink" title="sendfile+DMA scatter&#x2F;gather实现的零拷贝"></a>sendfile+DMA scatter&#x2F;gather实现的零拷贝</h2><p>linux 2.4版本之后，对<code>sendfile</code>做了优化升级，引入SG-DMA技术，其实就是对DMA拷贝加入了<code>scatter/gather</code>操作，它可以直接从内核空间缓冲区中将数据读取到网卡。使用这个特点搞零拷贝，即还可以多省去<strong>一次CPU拷贝</strong>。</p><p>sendfile+DMA scatter&#x2F;gather实现的零拷贝流程如下：</p><ul><li>用户进程发起sendfile系统调用，<strong>上下文（切换1）从用户态转向内核态</strong></li><li>DMA控制器，把数据从硬盘中拷贝到内核缓冲区，<strong>DMA拷贝（拷贝1）</strong>。</li><li>CPU把内核缓冲区中的<strong>文件描述符信息</strong>（包括内核缓冲区的内存地址和偏移量）发送到socket缓冲区</li><li>DMA控制器根据文件描述符信息，直接把数据从内核缓冲区拷贝到网卡，<strong>DMA拷贝（拷贝2）</strong></li><li><strong>上下文（切换2）从内核态切换回用户态</strong>，sendfile调用返回。</li></ul><p><code>sendfile+DMA scatter/gather</code>实现的零拷贝，I&#x2F;O发生了<strong>2次</strong>用户空间与内核空间的上下文切换，以及<strong>2次</strong>数据拷贝。其中2次数据拷贝都是包<strong>DMA拷贝</strong>。这就是真正的 <strong>零拷贝（Zero-copy)</strong> 技术，全程都没有通过CPU来搬运数据，所有的数据都是通过DMA来进行传输的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> Netty </tag>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP粘包/拆包的原因和解决方案</title>
      <link href="/2022/05/18/tcp-nian-bao-chai-bao-de-yuan-yin-he-jie-jue-fang-an/"/>
      <url>/2022/05/18/tcp-nian-bao-chai-bao-de-yuan-yin-he-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>TCP使用Nagle算法优化网络传输效率或发送网络抖动导致。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>应用程序写入的字节大小大于套接字发送缓冲区的大小，会发生拆包现象，而应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包现象；</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="常见四种解决方案"><a href="#常见四种解决方案" class="headerlink" title="常见四种解决方案"></a>常见四种解决方案</h3><ol><li>使用定长的编码</li><li>基于分隔符（比如7d7d）</li><li>基于固定行数的编码（换行符\r\n）</li><li>长度编码（报文的前n个字节，声明报文剩余内容的长度），一般n为4个字节</li></ol><h3 id="基于上述解决方案的-Netty-解码器"><a href="#基于上述解决方案的-Netty-解码器" class="headerlink" title="基于上述解决方案的 Netty 解码器"></a>基于上述解决方案的 Netty 解码器</h3><ol><li>FixedLengthFrameDecoder 类</li><li>LineBasedFrameDecoder 或自定义分隔符类</li><li>DelimiterBasedFrameDecoder</li></ol><h3 id="基于上述解决方案的自定义序列化编解码器"><a href="#基于上述解决方案的自定义序列化编解码器" class="headerlink" title="基于上述解决方案的自定义序列化编解码器"></a>基于上述解决方案的自定义序列化编解码器</h3><ol><li>通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多，另外还有一些序列化性能非常好的序列化方式也是很好的选择：</li><li>专门针对 Java 语言的：Kryo，FST 等</li><li>跨语言的：Protostuff（基于 protobuf 发展而来），ProtoBuf，Thrift，Avro，MsgPack 等</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法区别</title>
      <link href="/2022/05/18/jia-mi-suan-fa-qu-bie/"/>
      <url>/2022/05/18/jia-mi-suan-fa-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="Base64算法"><a href="#Base64算法" class="headerlink" title="Base64算法"></a>Base64算法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>base64是一种基于64个可打印字符来表示二进制数据的方法</p><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><ol><li>将待转换的字符串每三个字节分为一组，每个字节占 8 个二进制位，那么共有 24 个二进制位。</li><li>将第1步得到的每 24 个二进制位分为每 6 个一组，则每 3 个字节可分为 4 组。</li><li>在每组前面添加两个 0 ，每组由 6 个二进制位变为 8 个二进制位，总共 32 个二进制位，即四个字节。</li><li>根据 Base64编码对照表获得对应的值。</li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在只支持可见字符传输的传统协议上，增加一种扩展方案，以便于二进制数据（图片、文件等）或不可见字符数据（传统邮件）的传输或存储。</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>Q：Base64是加密算法吗？</p><p>A：Base64不是加密算法，它只是一种二进制转换为字符串的特定编码格式</p><h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>MD5全称为信息摘要算法（哈希算法），是计算机安全领域的的散列函数，正因为如此，数据通过MD5生成的值，是不可逆的，即无法通过生成的值获取到原数据。</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>信息的完整性：大多数情况下，每个数据生成的MD5值不同，所以可以把MD5值和数据一块发送，在对端使用MD5加密对数据加密在与接收的MD5码做对比，保证数据的正确性。</p><p>安全访问认证：保存到数据库的密码使用MD5进行加密，校验时，将用户输入的密码进行MD5加密再与数据库的值进行比对，这样数据库中的用户隐私信息不会直接暴露给后台。</p><h3 id="Q-amp-A-1"><a href="#Q-amp-A-1" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>Q：MD5算法是加密算法吗？</p><p>A：MD5不算是加密算法，它只是一种单向的唯一映射（哈希算法），但是这种映射关系并不是唯一的，一个MD5值对应着无穷多的原始值，只是单向的唯一。</p><h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>对称加密是在加密前双方都应该知道加密算法和密钥，而且密钥相同。比如：A和B实现约定使用的加密算法和解密密钥，然后进行数据传输。</p><h5 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h5><p>AES，DES，3DES</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><h5 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h5><p>非对称加密是双方各自产生自己的密钥，然后将自己的加密密钥传递给对方，在使用时先给数据使用对方的加密密钥加密，发送给对方后，各自使用自己的解密密钥来解密数据。</p><h5 id="常见算法-1"><a href="#常见算法-1" class="headerlink" title="常见算法"></a>常见算法</h5><p>RSA，DSA，RCC</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><table><thead><tr><th></th><th>对称加密</th><th>非对称加密</th></tr></thead><tbody><tr><td><strong>安全性</strong></td><td>安全性能不高</td><td>安全性能高</td></tr><tr><td><strong>加密速度</strong></td><td>速度快</td><td>速度慢</td></tr><tr><td><strong>密钥</strong></td><td>公钥</td><td>公钥和私钥</td></tr></tbody></table><h2 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h2><p>AES是采用分组加密的对称加密算法</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
            <tag> MD5 </tag>
            
            <tag> AES </tag>
            
            <tag> BASE64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP失效场景</title>
      <link href="/2022/05/17/springaop-shi-xiao/"/>
      <url>/2022/05/17/springaop-shi-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringAOP概念"><a href="#SpringAOP概念" class="headerlink" title="SpringAOP概念"></a>SpringAOP概念</h2><p>通过继承父类，对目标类一个或多个方法进行增强。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>静态代理：手写一个目标类的子类，增强其逻辑再调用目标方法。</p><p>动态代理：在程序执行的过程中，通过Java的反射机制，创建目标对象，增强其逻辑并调用目标方法。</p><p>区别：静态代理要增强的目标是固定的，需要编写代码，且随着目标方法的改变，增强逻辑也可能会改变。</p><table><thead><tr><th>区别</th><th>静态代理</th><th>动态代理</th></tr></thead><tbody><tr><td>实现方式</td><td>实现简单易理解</td><td>实现复杂</td></tr><tr><td>可扩展性&#x2F;灵活性</td><td>接口增加一个方法，实现类及代理类都需要增加</td><td>无需改变</td></tr></tbody></table><p>动态代理有两种两种实现方式，JDK的Proxy和第三方库的Cglib</p><p>JDK的Proxy，代理的目标必须要是某个接口实现类，<code>Proxy.newProxyInstance()</code>创建的是这个接口的另一个实现类，所以JDK的Proxy要求目标类和代理类实现同一个接口，如果目标类不存在接口，则无法实现（兄弟模式）。</p><p>Cglib则采用继承目标类的方式，重写目标类的方法，已达到增强的目的（父子模式）。</p><h2 id="SpringAOP原理"><a href="#SpringAOP原理" class="headerlink" title="SpringAOP原理"></a>SpringAOP原理</h2><p>基于JDK Proxy和Cglib动态代理，以增强目标方法，当目标类是以接口方式实现的时候，采用JDK进行动态代理（松耦合），否则采用Cglib动态代理，若目标类不是以接口方式实现且是final关键字修饰无法继承时，则无法使用AOP。</p><h2 id="AOP失效场景"><a href="#AOP失效场景" class="headerlink" title="AOP失效场景"></a>AOP失效场景</h2><p>方法不能被子类重写，aop会失效，比如 final 修饰的、static 修饰的 、private 修饰的和构造方法</p><p>调用的对象不是代理对象，调用对象还是目标对象，aop会失效，比如aop增强了目标类的A，B方法，目标类中的A方法调用目标类中的B方法，当代理对象调用A方法时，B方法便不会被增强，原因是代理对象调用了A方法，A方法里是目标对象(this)对B方法的调用，而不是代理对象对B方法的调用。</p><h2 id="AOP失效解决方案"><a href="#AOP失效解决方案" class="headerlink" title="AOP失效解决方案"></a>AOP失效解决方案</h2><p>第一种，不要在增强的方法中用当前对象调用同类的另一个方法，使用两个类，则对应的两个代理分别进行增强</p><p>第二种，修改当前类中方法嵌套调用的调用对象，由目标对象改为代理对象去调用，使用方式如下：</p><p>通过配置暴露出代理对象，SpringBoot可以通过注解<code>@EnableAspectJAutoProxy(exposeProxy = true)</code>，默认是false</p><p>通过AopContext获取当前上下文代理对象<code>AopContext.currentProxy()</code>，再通过该代理对象调用对应的方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Aop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
